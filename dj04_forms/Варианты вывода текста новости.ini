Чтобы ограничить вывод текста до 200 символов в HTML-шаблоне, использовать фильтр `truncatechars`, 
который предоставляет Django. Этот фильтр обрезает строку до заданного количества 
символов и добавляет в конце многоточие, если строка была обрезана.
```html
{% for new in news %}
  <div>
    <h3>{{ new.title }}</h3>
    <p>{{ new.short_description }}</p>
    <p>{{ new.text|truncatechars:200 }}</p>  <!-- Ограничиваем текст до 200 символов -->
  </div>
{% endfor %}
```

если вы хотите обрезать текст без добавления многоточия, использовать фильтр `slice`:
```html
<p>{{ new.text|slice:":200" }}</p>  <!-- Ограничиваем текст до 200 символов без многоточия -->
```
Этот метод просто обрезает строку до 200 символов без добавления каких-либо дополнительных символов. Выберите тот подход, который лучше соответствует вашим требованиям.

### 1. Ограничить количество строк при выводе
### 2. При нажатии на кнопку выводить `text` полностью

Если вы хотите ограничить количество строк текста, выводимого в `{{ new.text }}`, 
использовать срезы в шаблонах Django. Например, хотите выводить только первые 210 символов текста, 
можно сделать так:

```html
{% for new in news %}
  <div>
    <h3>{{ new.title }}</h3>
    <p>{{ new.short_description }}</p>
    <p>{{ new.text|slice:":210" }}...</p>  <!-- Ограничиваем вывод 210 символами и добавляем многоточие -->
    <button onclick="document.getElementById('full-text-{{ new.id }}').style.display='block'">Показать полностью</button>
    <p id="full-text-{{ new.id }}" style="display:none;">{{ new.text }}</p>
  </div>
{% endfor %}
```

### 3. При нажатии на кнопку выводить `text` полностью, но не более 210 строк

ограничить отображение текста до 210 строк, использовать JavaScript для подсчета строк. 
```html
{% for new in news %}
  <div>
    <h3>{{ new.title }}</h3>
    <p>{{ new.short_description }}</p>
    <p id="preview-text-{{ new.id }}">{{ new.text|slice:":210" }}...</p>
    <button onclick="toggleText('{{ new.id }}')">Показать полностью</button>
    <p id="full-text-{{ new.id }}" style="display:none;">{{ new.text }}</p>
  </div>
{% endfor %}

<script>
function toggleText(id) {
    const fullTextElement = document.getElementById('full-text-' + id);
    const previewTextElement = document.getElementById('preview-text-' + id);
    
    if (fullTextElement.style.display === "none") {
        fullTextElement.style.display = "block";
        previewTextElement.style.display = "none"; // Скрываем превью
    } else {
        fullTextElement.style.display = "none";
        previewTextElement.style.display = "block"; // Показываем превью
    }
}
</script>
```
 перед выводом краткого описания новостей указать, что это именно краткое описание, 
 ```html
{% for new in news %}
  <div>
    <h3>{{ new.title }}</h3>
    <p><strong>Краткое описание:</strong></p>  <!-- Указываем, что это краткое описание -->
    <p>{{ new.short_description }}</p>
    <p>{{ new.text|slice:":210" }}...</p>
    <button onclick="toggleText('{{ new.id }}')">Показать полностью</button>
    <p id="full-text-{{ new.id }}" style="display:none;">{{ new.text }}</p>
  </div>
{% endfor %}
```
добавить дополнительные стили или классы CSS, вы можете сделать это следующим образом:

```html
<p class="short-description-label">Краткое описание:</p>
<p class="short-description">{{ new.short_description }}</p>
```

Здесь вы можете добавить классы CSS для дальнейшей стилизации.

перед выводом   <p>{{ new.short_description }}</p> указать что это краткое описание, но в той же строке.

указать, что это краткое описание, и сделать это в той же строке с использованием HTML, 

```html
<p>Краткое описание: {{ new.short_description }}</p>
```

выделить текст "Краткое описание", вы можете использовать тег `<strong>` или `<span>` с классом для 
стилизации. 

```html
<p><strong>Краткое описание:</strong> {{ new.short_description }}</p>
```

Или с использованием класса:

```html
<p><span class="description-label">Краткое описание:</span> {{ new.short_description }}</p>
```

добавить соответствующие стили в ваш CSS, если используете класс.